name: CI

permissions:
  contents: read

on:
  pull_request:
  push:
    branches:
      - main
      - dev
  schedule:
    - cron: '0 1 * * *'
  workflow_dispatch:

env:
  CARGO_INCREMENTAL: 0
  CARGO_NET_GIT_FETCH_WITH_CLI: true
  CARGO_NET_RETRY: 10
  CARGO_TERM_COLOR: always
  QEMU_STRACE: 1
  RUST_BACKTRACE: 1
  RUST_TEST_THREADS: 1
  RUSTDOCFLAGS: -D warnings
  RUSTFLAGS: -D warnings
  RUSTUP_MAX_RETRIES: 10

defaults:
  run:
    shell: bash

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

jobs:
  tidy:
    uses: taiki-e/workflows/.github/workflows/tidy.yml@main

  test:
    strategy:
      fail-fast: false
      matrix:
        # https://github.com/taiki-e/rust-cross-toolchain/blob/HEAD/tools/target-list-shared.sh
        target:
          # Linux (GNU)
          # rustup target list | grep -e '-linux-gnu'
          # rustc --print target-list | grep -e '-linux-gnu'
          - aarch64-unknown-linux-gnu
          # - aarch64-unknown-linux-gnu_ilp32 # tier3
          # TODO: compiler-builtins bug https://github.com/rust-lang/compiler-builtins/pull/539
          # - aarch64_be-unknown-linux-gnu # tier3
          # - aarch64_be-unknown-linux-gnu_ilp32 # tier3
          - armeb-unknown-linux-gnueabi # tier3
          - arm-unknown-linux-gnueabi
          # - arm-unknown-linux-gnueabihf # supported in rust-cross-toolchain but not ported to this action
          # - armv4t-unknown-linux-gnueabi # tier3, rustc generate code for armv5t (probably needs to pass +v4t to llvm)
          - armv5te-unknown-linux-gnueabi
          - armv7-unknown-linux-gnueabi
          - armv7-unknown-linux-gnueabihf
          - i586-unknown-linux-gnu
          - i686-unknown-linux-gnu
          # - m68k-unknown-linux-gnu # tier3, build fail: https://github.com/rust-lang/rust/issues/89498
          # - mips-unknown-linux-gnu # TODO: LLVM bug: Undefined temporary symbol error when building std.
          - mips64-unknown-linux-gnuabi64
          - mips64el-unknown-linux-gnuabi64
          # - mipsel-unknown-linux-gnu # TODO: LLVM bug: Undefined temporary symbol error when building std.
          - mipsisa32r6-unknown-linux-gnu # tier3
          - mipsisa32r6el-unknown-linux-gnu # tier3
          - mipsisa64r6-unknown-linux-gnuabi64 # tier3
          - mipsisa64r6el-unknown-linux-gnuabi64 # tier3
          - powerpc-unknown-linux-gnu
          # - powerpc-unknown-linux-gnuspe # tier3, fails to run test, and GCC 9 removed support for this target
          - powerpc64-unknown-linux-gnu
          - powerpc64le-unknown-linux-gnu
          - riscv32gc-unknown-linux-gnu # tier3
          - riscv64gc-unknown-linux-gnu
          - s390x-unknown-linux-gnu
          # - sparc-unknown-linux-gnu # tier3, supported in rust-cross-toolchain but not ported to this action
          - sparc64-unknown-linux-gnu
          - thumbv7neon-unknown-linux-gnueabihf
          - x86_64-unknown-linux-gnu
          # - x86_64-unknown-linux-gnux32 # tier3, run-fail

          # FreeBSD
          # rustup target list | grep -e '-freebsd'
          # rustc --print target-list | grep -e '-freebsd'
          - aarch64-unknown-freebsd # tier3
          # - armv6-unknown-freebsd # tier3
          # - armv7-unknown-freebsd # tier3
          - i686-unknown-freebsd
          # - powerpc-unknown-freebsd # tier3
          # - powerpc64-unknown-freebsd # tier3
          # - powerpc64le-unknown-freebsd # tier3
          # - riscv64gc-unknown-freebsd # tier3
          - x86_64-unknown-freebsd

          # NetBSD
          # rustup target list | grep -e '-netbsd'
          # rustc --print target-list | grep -e '-netbsd'
          - aarch64-unknown-netbsd # tier3
          # - aarch64_be-unknown-netbsd # tier3
          # - armv6-unknown-netbsd-eabihf # tier3
          # - armv7-unknown-netbsd-eabihf # tier3
          # - i686-unknown-netbsd # tier3
          # - powerpc-unknown-netbsd # tier3
          # - riscv64gc-unknown-netbsd # tier3
          # - sparc64-unknown-netbsd # tier3
          - x86_64-unknown-netbsd

          # OpenBSD
          # rustc --print target-list | grep -e '-openbsd'
          # - aarch64-unknown-openbsd # tier3
          # - i686-unknown-openbsd # tier3
          # - powerpc-unknown-openbsd # tier3
          # - powerpc64-unknown-openbsd # tier3
          # - riscv64gc-unknown-openbsd # tier3
          # - sparc64-unknown-openbsd # tier3
          - x86_64-unknown-openbsd@7.2 # tier3
          - x86_64-unknown-openbsd@7.3 # tier3

          # WASI
          # rustup target list | grep -e '-wasi'
          # rustc --print target-list | grep -e '-wasi'
          - wasm32-wasi
        os:
          - ubuntu-22.04
          - ubuntu-20.04
          # GHA regularly brownout ubuntu-18.04, so we don't enable it by default.
          # https://github.com/actions/runner-images/issues/6002
          # - ubuntu-18.04
        # prettier-ignore
        # TODO: https://github.com/taiki-e/setup-cross-toolchain-action/issues/9
        # include:
        #   # Windows (GNU)
        #   # rustup target list | grep -e '-pc-windows-gnu'
        #   # rustc --print target-list | grep -e '-pc-windows-gnu'
        #   # - { target: i686-pc-windows-gnu, os: ubuntu-22.04 }
        #   - { target: x86_64-pc-windows-gnu, os: ubuntu-22.04 }
        #   - { target: x86_64-pc-windows-gnu, os: ubuntu-22.04, runner: wine@7.13 }
        #   - { target: x86_64-pc-windows-gnu, os: ubuntu-22.04, runner: wine@7.0.1 }
        exclude:
          # Segmentation fault on ubuntu 20.04
          - { target: aarch64_be-unknown-linux-gnu, os: ubuntu-20.04 }
          - { target: armeb-unknown-linux-gnueabi, os: ubuntu-20.04 }
          - { target: mips-unknown-linux-gnu, os: ubuntu-20.04 }
          - { target: mips64-unknown-linux-gnuabi64, os: ubuntu-20.04 }
          - { target: mipsisa32r6-unknown-linux-gnu, os: ubuntu-20.04 }
          - { target: mipsisa64r6-unknown-linux-gnuabi64, os: ubuntu-20.04 }
          - { target: powerpc64-unknown-linux-gnu, os: ubuntu-20.04 }
          - { target: sparc64-unknown-linux-gnu, os: ubuntu-20.04 }
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v3
        with:
          persist-credentials: false
      - name: Install Rust
        run: rustup toolchain add nightly --no-self-update && rustup default nightly
      - uses: ./
        with:
          target: ${{ matrix.target }}
          runner: ${{ matrix.runner }}
      - run: git clone https://github.com/taiki-e/rust-cross-toolchain.git
      - run: ci/test.sh ${{ matrix.target }} rust-cross-toolchain/docker/test/fixtures/rust
        id: test
      # For debugging
      - uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.target }}-${{ matrix.os }}
          path: /tmp/artifacts/
